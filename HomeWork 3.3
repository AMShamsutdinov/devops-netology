1) Какой системный вызов делает команда cd? В прошлом ДЗ мы выяснили, что cd не является самостоятельной программой, это shell builtin, поэтому запустить strace непосредственно на cd не получится. Тем не менее, вы можете запустить strace на /bin/bash -c 'cd /tmp'. В этом случае вы увидите полный список системных вызовов, которые делает сам bash при старте. Вам нужно найти тот единственный, который относится именно к cd.
Консоль:
stat("/tmp", {st_mode=S_IFDIR|S_ISVTX|0777, st_size=4096, ...}) = 0
chdir("/tmp")                         = 0
Ответ: chdir("/tmp")

2)

3)

4) Занимают ли зомби-процессы какие-то ресурсы в ОС (CPU, RAM, IO)?

Зомби не занимают памяти (как процессы-сироты), но блокируют записи в таблице процессов, размер которой ограничен для каждого пользователя и системы в целом.

5) В iovisor BCC есть утилита opensnoop:
root@vagrant:~# dpkg -L bpfcc-tools | grep sbin/opensnoop
/usr/sbin/opensnoop-bpfcc
На какие файлы вы увидели вызовы группы open за первую секунду работы утилиты? 

6) Какой системный вызов использует uname -a? Приведите цитату из man по этому системному вызову, где описывается альтернативное местоположение в /proc, где можно узнать версию ядра и релиз ОС.

Ответ:
uname({sysname="Linux", nodename="vagrant", ...}) = 0
fstat(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(0x88, 0x5), ...}) = 0
uname({sysname="Linux", nodename="vagrant", ...}) = 0
uname({sysname="Linux", nodename="vagrant", ...}) = 0

Цитата из man: Part of the utsname information is also accessible via /proc/sys/kernel/{ostype, hostname, osrelease, version, domainname}

7) Чем отличается последовательность команд через ; и через && в bash? Например:
root@netology1:~# test -d /tmp/some_dir; echo Hi
Hi
root@netology1:~# test -d /tmp/some_dir && echo Hi
root@netology1:~#
Есть ли смысл использовать в bash &&, если применить set -e?

Ответ:
; - это разделитель команд. Коанды будут выполнятся группой в подоболочке
&& - это логическая операция и. Команды выполняются последовательно. Следующая команда будет выполнятьсся при удачном исходе предыдущей.
set -e - При данном параметре выход из оболочки происходит при неудачном завершении конвеера. Смысла ее использовать с && нет, т.к. выполненеи команд итак прекратится при неудачном исходе. 

8) Из каких опций состоит режим bash set -euxo pipefail и почему его хорошо было бы использовать в сценариях?
-e - Завершить команду, если она выдает ненулевой код завершения
-u - интерпретировать при подстановках неустановленные переменные как ошибки
-x - Отображать команды вместе с их аргументами, когда они выполняются, предваряя их приглашение из переменной PS4
-o pipefail заменить код завершения конвейера на код завершения последней неудачно завершившейся команды или нулевой код завершения, если все команды завершились удачно 
Данные параметры хорошо использовать при отладке ошибок.

9)Используя -o stat для ps, определите, какой наиболее часто встречающийся статус у процессов в системе. В man ps ознакомьтесь (/PROCESS STATE CODES) что значат дополнительные к основной заглавной буквы статуса процессов. Его можно не учитывать при расчете (считать S, Ss или Ssl равнозначными)

Консоль:
vagrant@vagrant:/$ ps ax -o comm,pid,stat|grep -c "I<"
37
vagrant@vagrant:/$ ps ax -o comm,pid,stat|grep -c "Ss"
35
vagrant@vagrant:/$ ps ax -o comm,pid,stat|grep -c "I"
47
vagrant@vagrant:/$ ps ax -o comm,pid,stat|grep -c "Ss+"
8
vagrant@vagrant:/$ ps ax -o comm,pid,stat|grep -c "R"
1
vagrant@vagrant:/$ ps ax -o comm,pid,stat|grep -c "R+"
1
vagrant@vagrant:/$ ps ax -o comm,pid,stat|grep -c "Ssl"
8
vagrant@vagrant:/$ ps ax -o comm,pid,stat|grep -c "S<"
8

Ответ: Больше всего бездействующих процессов.


R : процесс выполняется в данный момент;
S : процесс ожидает (т.е. спит менее 20 секунд);
I : процесс бездействует (т.е. спит больше 20 секунд);
D : процесс ожидает ввода-вывода (или другого недолгого события), непрерываемый;
Z : zombie или defunct процесс, то есть завершившийся процесс, код возврата которого пока не считан родителем;
T : процесс остановлен;
W : процесс в свопе;
< : процесс в приоритетном режиме;
N : процесс в режиме низкого приоритета;
L : real-time процесс, имеются страницы, заблокированные в памяти;
s : лидер сессии.
